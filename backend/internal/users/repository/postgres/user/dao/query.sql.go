// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package dao

import (
	"context"

	"github.com/google/uuid"
)

const deleteUser = `-- name: DeleteUser :one
DELETE FROM "user"
WHERE user_id = $1
RETURNING user_id, name, email, password, created_at, modified_at
`

func (q *Queries) DeleteUser(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, name, email, password, created_at, modified_at
FROM "user"
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, name, email, password, created_at, modified_at
FROM "user"
WHERE user_id = $1
`

func (q *Queries) GetUserById(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO "user"(name, email, password)
VALUES ($1, $2, $3) RETURNING user_id, name, email, password, created_at, modified_at
`

type InsertUserParams struct {
	Name     string
	Email    string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET
    name = $1,
    email = $2,
    password = $3,
    modified_at = now()
WHERE
    user_id = $4
RETURNING user_id, name, email, password, created_at, modified_at
`

type UpdateUserParams struct {
	Name     string
	Email    string
	Password string
	UserID   uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
