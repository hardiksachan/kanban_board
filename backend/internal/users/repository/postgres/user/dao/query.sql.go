// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package dao

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const deleteUser = `-- name: DeleteUser :one
DELETE
FROM "user"
WHERE user_id = $1
RETURNING user_id, name, email, password,created_at, modified_at
`

type DeleteUserRow struct {
	UserID     uuid.UUID
	Name       string
	Email      string
	Password   string
	CreatedAt  time.Time
	ModifiedAt time.Time
}

func (q *Queries) DeleteUser(ctx context.Context, userID uuid.UUID) (DeleteUserRow, error) {
	row := q.db.QueryRow(ctx, deleteUser, userID)
	var i DeleteUserRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, name, email, password, created_at, modified_at
FROM "user"
WHERE email = $1
`

type GetUserByEmailRow struct {
	UserID     uuid.UUID
	Name       string
	Email      string
	Password   string
	CreatedAt  time.Time
	ModifiedAt time.Time
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, name, email, password, created_at, modified_at
FROM "user"
WHERE user_id = $1
`

type GetUserByIdRow struct {
	UserID     uuid.UUID
	Name       string
	Email      string
	Password   string
	CreatedAt  time.Time
	ModifiedAt time.Time
}

func (q *Queries) GetUserById(ctx context.Context, userID uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, userID)
	var i GetUserByIdRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getUserMetadata = `-- name: GetUserMetadata :one
SELECT user_id, display_name, profile_image_url
FROM "user"
WHERE user_id = $1
`

type GetUserMetadataRow struct {
	UserID          uuid.UUID
	DisplayName     string
	ProfileImageUrl sql.NullString
}

func (q *Queries) GetUserMetadata(ctx context.Context, userID uuid.UUID) (GetUserMetadataRow, error) {
	row := q.db.QueryRow(ctx, getUserMetadata, userID)
	var i GetUserMetadataRow
	err := row.Scan(&i.UserID, &i.DisplayName, &i.ProfileImageUrl)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO "user"(name, email, password, display_name)
VALUES ($1, $2, $3, $1)
RETURNING user_id, name, email, password,created_at, modified_at
`

type InsertUserParams struct {
	Name     string
	Email    string
	Password string
}

type InsertUserRow struct {
	UserID     uuid.UUID
	Name       string
	Email      string
	Password   string
	CreatedAt  time.Time
	ModifiedAt time.Time
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Name, arg.Email, arg.Password)
	var i InsertUserRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET name        = $1,
    email       = $2,
    password    = $3,
    modified_at = now()
WHERE user_id = $4
RETURNING user_id, name, email, password, created_at, modified_at
`

type UpdateUserParams struct {
	Name     string
	Email    string
	Password string
	UserID   uuid.UUID
}

type UpdateUserRow struct {
	UserID     uuid.UUID
	Name       string
	Email      string
	Password   string
	CreatedAt  time.Time
	ModifiedAt time.Time
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.UserID,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const updateUserMetadata = `-- name: UpdateUserMetadata :one
UPDATE "user"
SET display_name      = $1,
    profile_image_url = $2,
    modified_at       = now()
WHERE user_id = $3
RETURNING user_id, display_name, profile_image_url
`

type UpdateUserMetadataParams struct {
	DisplayName     string
	ProfileImageUrl sql.NullString
	UserID          uuid.UUID
}

type UpdateUserMetadataRow struct {
	UserID          uuid.UUID
	DisplayName     string
	ProfileImageUrl sql.NullString
}

func (q *Queries) UpdateUserMetadata(ctx context.Context, arg UpdateUserMetadataParams) (UpdateUserMetadataRow, error) {
	row := q.db.QueryRow(ctx, updateUserMetadata, arg.DisplayName, arg.ProfileImageUrl, arg.UserID)
	var i UpdateUserMetadataRow
	err := row.Scan(&i.UserID, &i.DisplayName, &i.ProfileImageUrl)
	return i, err
}
